@model Dictionary<string, object>

@{
    var suppliers = Model["SupplierLookup"] as List<Purchase>;
    var locations = Model["LocLookup"] as List<Location>;
    var poLookup = suppliers.Select(s => new { s.Id, s.PurchaseNo }).ToList();
    var arrPoNumberLookup = Newtonsoft.Json.JsonConvert.SerializeObject(poLookup);
}

<button type="button" id="btnAddModal1" class="btn btn-primary btn-circle btn-lg" data-toggle="modal" data-target="#addModal">+</button>

<!-- Modal -->
<div class="modal fade" id="addModal" data-backdrop="static" data-keyboard="false" aria-labelledby="addModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <form action="/Receive/Create" method="post" enctype="multipart/form-data" class="form-horizontal">
                <div class="modal-header">
                    <h5 class="modal-title">Create Stock Receiving</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <!-- Text input-->
                    <div class="form-group">
                        <input type="hidden" v-model="PurchaseId" id="PurchaseId" name="PurchaseId" class="form-control" readonly>
                        <select v-model="SupplierId" id="SupplierId" name="SupplierId" class="form-control text-center" @@change="GetPurchase()" autofocus required>
                            <option value="SupplierId" selected disabled>Select Purchase</option>
                            @foreach (var supplier in suppliers)
                            {
                                <option value="@supplier.Id">@supplier.Supplier.Name @supplier.Id @supplier.PurchaseNo</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <select id="LocationId" name="LocationId" class="form-control" required="required">
                            @*<option value="" selected disabled>Select location</option>*@
                            @foreach (var location in locations)
                            {
                                <option value="@location.Id" selected>@location.Name</option>
                            }
                        </select>
                        @*<input type="text" v-model="PurchaseNo" id="PurchaseNo" name="PurchaseNo" class="form-control" readonly>*@
                        <input type="hidden" id="Status" name="Status" value="Pending" readonly>
                    </div>
                    <div class="form-group row">
                        <label for="ReceiveDate" class="col-md-4 col-form-label">Receive Date</label>
                        <div class="col-md-8">
                            <input type="date" id="ReceiveDate" name="ReceiveDate" value="@ViewBag.ReceiveDate.ToString("yyyy-MM-dd")" class="form-control" readonly>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Notes" class="col-md-2 col-form-label">Notes</label>
                        <div class="col-md-10">
                            <textarea rows="3" id="Notes" name="Notes" class="form-control" title="Only letters allowed" placeholder="Optional"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script type="module">
    // https://github.com/vuejs/petite-vue
    import { createApp } from "/Scripts/petite-vue.es.js";
    const app = {
        //data
        SupplierId: null,
        PurchaseNo: null,
        PurchaseId: null,
        //methods
        GetPurchase() {
            let supplier = @(Html.Raw(arrPoNumberLookup)).find(x => x.Id == this.SupplierId);
            this.PurchaseId = supplier.Id.toString();
            this.PurchaseNo = supplier.PurchaseNo.toString();
        },
    };
    createApp(app).mount();
</script>

<link rel="stylesheet" href="/Content/Util/slimselect.min.css" />
<script src="https://unpkg.com/slim-select@latest/dist/slimselect.min.js"></script>
<script type="module">
    import SlimSelect from '/Scripts/Util/slimselect.es.min.js'
    new SlimSelect({
        select: '#SupplierId',
        settings: { searchPlaceholder: 'Search for the Supplier!' }
    });
    new SlimSelect({
        select: '#Location',
        settings: { searchPlaceholder: 'Search for the Location!' }
    });

    document.getElementById('Notes').addEventListener('input', function () {
        var regex = /^[A-Za-z ]*$/;
        var textareaValue = this.value;
        if (!regex.test(textareaValue)) {
            this.setCustomValidity('Only letters and spaces are allowed.');
        } else {
            this.setCustomValidity('');
        }
    });
</script>

@*<style>
        select[required] {
            display: block !important;
            position: absolute;
            clip: rect(0, 0, 0, 0);
            pointer-events: none;
        }
    </style>*@