@model Dictionary<string, object>
@{
    var products = Model["ProductLookup"] as List<Product>;
    var priceLookup = products.Select(s => new { s.Id, s.PurchasePrice }).ToList();
    var arrPriceLookup = Newtonsoft.Json.JsonConvert.SerializeObject(priceLookup);
}

<button type="button" id="btnAddModal1" class="btn btn-primary btn-circle btn-lg" data-toggle="modal" data-target="#addModal">+</button>

<!-- Modal -->
<div class="modal fade" id="addModal" data-backdrop="static" data-keyboard="false" aria-labelledby="addModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <form action="/PurchasePrice/Create" method="post" enctype="multipart/form-data" class="form-horizontal">
                <div class="modal-header">
                    <h5 class="modal-title">New Purchase Price</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <!-- Text input-->
                    <div class="form-group row">
                        <div class="col-md-12">
                            <select v-model="ProductId" id="ProductId" name="ProductId" class="form-control" @@change="GetProductPrice()" autofocus required="required">
                                <option value="" selected disabled>Select Product</option>
                                @foreach (var product in products)
                                {
                                    <option value="@product.Id">@product.Name - ₱@product.PurchasePrice.ToString("N2")/@product.Unit</option>
                                }
                            </select>
                            <input type="hidden" v-model="ProductPrice">
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="UpdatedPrice" class="col-md-4 col-form-label text-center">Updated Price</label>
                        <div class="col-md-8">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">₱</span>
                                </div>
                                <input type="text" v-model="PurchasePrice" id="UpdatedPrice" name="UpdatedPrice" class="form-control" min="5" pattern="[0-9.]+" title="Only price allowed" required>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="PriceDate" class="col-md-4 col-form-label text-center">Price Date</label>
                        <div class="col-md-8">
                            <input type="text" id="PriceDate" name="PriceDate" value="@ViewBag.PriceDate.ToString("yyyy-MM-dd")" class="form-control" readonly>
                            @*<input type="hidden" id="Percent" name="Percent" class="form-control" min="10" value="10" max="100" pattern="[0-9]+" title="Only number allowed" required>*@
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" :disabled="btnDisabled">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>

<link rel="stylesheet" href="/Content/Util/slimselect.min.css" />
<script type="module">
    import SlimSelect from '/Scripts/Util/slimselect.es.min.js'
    new SlimSelect({
        select: '#ProductId',
        settings: { searchPlaceholder: 'Search for the Product!' }
    });
</script>

<script type="module">
    // https://github.com/vuejs/petite-vue
    import { createApp } from "/Scripts/petite-vue.es.js";
    const app = {
        //data
        ProductId: null,
        ProductPrice: null,
        PurchasePrice: null,
        //methods
        GetProductPrice() {
            let product = @(Html.Raw(arrPriceLookup)).find(x => x.Id == this.ProductId);
            this.PurchasePrice = product.PurchasePrice.toLocaleString('en-PH', { minimumFractionDigits: 2 });
            this.ProductPrice = product.PurchasePrice.toLocaleString('en-PH', { minimumFractionDigits: 2 });
        },

        get btnDisabled() {
            return !this.ProductPrice || (this.PurchasePrice <= this.ProductPrice);
        }
    };
    createApp(app).mount();
</script>

<style>
    select[required] {
        display: block !important;
        position: absolute;
        clip: rect(0, 0, 0, 0);
        pointer-events: none;
    }
</style>