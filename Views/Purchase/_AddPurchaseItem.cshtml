@model Dictionary<string, object>
@{
    var products = Model["ProductLookup"] as List<ProductSupplier>;
    var priceLookup = products.Select(s => new { s.Id, s.Product.PurchasePrice }).ToList();
    var arrPriceLookup = Newtonsoft.Json.JsonConvert.SerializeObject(priceLookup);
}

<button type="button" class="btn btn-outline-primary btn-sm" data-toggle="modal" data-target="#addItemModal">+ Add Item</button>

<!-- Modal -->
<div class="modal fade" id="addItemModal" data-backdrop="static" data-keyboard="false" aria-labelledby="addItemModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <form action="/Purchase/CreatePurchaseItem" method="post" class="form-horizontal" autocomplete="off">
                <div class="modal-header">
                    <h5 class="modal-title">Add Item</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Text input-->
                    <input type="hidden" id="PurchaseId" name="PurchaseId" value="@Model["PurchaseId"]" />
                    <div class="form-group">
                        <select v-model="ProductSupId" id="ProductSupId" name="ProductSupId" class="form-control" @@change="GetProductPrice()" autofocus required="required">
                            @if (products.Any(product => @Model["SupplierId"].ToString() == product.SupplierId.ToString()))
                            {
                                <option value="" selected disabled>Select Product</option>
                                foreach (var product in products)
                                {
                                    if (@Model["SupplierId"].ToString() == product.SupplierId.ToString())
                                    {
                                        <option value="@product.Id">@product.Product.Name - ₱@product.Product.PurchasePrice.ToString("N2")</option>
                                    }
                                }
                            }
                            else
                            {
                                <option value="" disabled>No products available for this supplier</option>
                            }
                        </select>
                    </div>
                    <div class="form-group row">
                        <label for="Quantity" class="col-md-4 col-form-label">Quantity</label>
                        <div class="col-md-8">
                            <input type="text" v-model="Quantity" id="Quantity" name="Quantity" class="form-control" min="1" pattern="[0-9]+" title="Only numbers allowed" required>
                            <input type="hidden" id="OrderDate" name="OrderDate" value="@ViewBag.OrderDate.ToString("yyyy-MM-dd")" readonly>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="PurchasePrice" class="col-md-4 col-form-label">Purchase Price</label>
                        <div class="col-md-8">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">₱</span>
                                </div>
                                <input type="number" v-model="PurchasePrice" id="PurchasePrice" name="PurchasePrice" class="form-control" readonly required>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Amount" class="col-md-4 col-form-label">Amount</label>
                        <div class="col-md-8">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">₱</span>
                                </div>
                                <input type="text" v-model="Amount" id="Amount" class="form-control" readonly required>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>

<link rel="stylesheet" href="/Content/Util/slimselect.min.css" />
<script type="module">
    import SlimSelect from '/Scripts/Util/slimselect.es.min.js'
    new SlimSelect({
        select: '#ProductSupId',
        settings: { searchPlaceholder: 'Search for the Product!' }
    });
</script>

@*<script>
    $(document).ready(function () {
        $('#SupplierId').change(function () {
            var supplierId = $(this).val();
            $.get("/Purchase/GetProductsBySupplier", { supplierId: supplierId }, function (data) {
                $("#ProductId").empty();
                $("#ProductId").append('<option value="" selected disabled>Select Product</option>');
                $.each(data, function (index, product) {
                    $("#ProductId").append('<option value="' + product.Value + '">' + product.Text + '</option>');
                });
            });
        });
    });
</script>*@

<script type="module">
    // https://github.com/vuejs/petite-vue
    import { createApp } from "/Scripts/petite-vue.es.js";
    const app = {
        //data
        ProductSupId: null,
        Quantity: 1,
        PurchasePrice: null,
        //methods
        GetProductPrice() {
            let product = @(Html.Raw(arrPriceLookup)).find(x => x.Id == this.ProductSupId); // Html.Raw(arrPriceLookup)) [{"Id":6,"UnitPrice":"190.00"},{"Id":10,"UnitPrice":"30.00"},{"Id":4,"UnitPrice":"75.00"}]
            this.PurchasePrice = product.PurchasePrice.toLocaleString('en-PH', { minimumFractionDigits: 2 });
        },
        //computed
        get Amount() {
            return (this.Quantity * this.PurchasePrice).toLocaleString('en-PH', { minimumFractionDigits: 2 });
        }
    };
    createApp(app).mount();
</script>

@*<style>
        select[required] {
            display: block !important;
            position: absolute;
            clip: rect(0, 0, 0, 0);
            pointer-events: none;
        }
    </style>*@
